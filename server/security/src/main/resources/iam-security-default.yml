# Copyright (c) 2017 ~ 2025, the original author wangl.sir individual Inc,
# All rights reserved. Contact us <Wanglsir@gmail.com, 983708408@qq.com>
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# #### Environment(IAM Web Security Configuration) configuration. ####
#
spring:
  infra:
    core.web:
      embedded-webapps:
        enabled: true # Default false
        base-uri: /view
        webapp-location: classpath*:/default-webapps
  iam: # IAM server configuration.
    cors:
      enabled: true # Default: true
      # Default rules: allowsOrigins=http://localhost:8080; allowsHeaders=X-Iam-*; allowsMethods=GET,HEAD,POST,OPTIONS
      rules:
        '[/**]':
          allows-methods: [GET,HEAD,POST,OPTIONS]
          allows-headers: [X-Iam-*]
          # Note: Some latest browsers, such as chrome 80.x+, only support sharing with the sub domain of the top-level domain name CORS.
          # You can also manually turn off the chrome switch(@see https://chromestatus.com/features/5088147346030592), visit chrome://flags
          # and search for samesite, find the options [SameSite by default cookies] and [Cookies without SameSite must be secure] set 
          # to disabled and restart chrome, but this is not recommended! For more solutions, please refer to: ideas like JWT/CAS/Oauth2 are extended.
          #   Fortunately, iam-jssdk solves this problem.The solution is mainly through the interface token, thereby breaking the limit of cookies,
          # and it is also very safe due to the use of a private encryption mechanism. However, the cost for such a perfect solution That is, each
          # front end has a little intrusion transformation, that is: each request needs to manually set the current token. For more information 
          # about iam-jssdk, please refer to: /default-webapps/sdk/{version}/src/js/IAM.js
          allow-credentials: true
          ##allows-origins:
            #- '*'
    xsrf:
      enabled: true # Default: false
      #exclude-valid-uri-patterns: 
    replay:
      enabled: true # Default: false
      #exclude-valid-uri-patterns: 
    xss:
      enabled: true # Default: true
      expression: execution(* com.wl4g.iam.core.*.*Controller.*(..)) or
                  execution(* com.wl4g.iam.sns.*.*Controller.*(..)) or
                  execution(* com.wl4g.iam.web.*.*Controller.*(..))
      escape-translators:
        #- escapeEcmascript
        #- escapeJava
        #- escapeHtml3
        #- escapeHtml4
     #service-name: ${spring.application.name}
     #login-uri: /view/login.html
     #unauthorized-uri: /view/403.html
     #success-endpoint: ${spring.application.name}@http://localhost:18080/${spring.application.name}/view/index.html
    filter-chain:
      '[/public/**]': anon
    param: # Must be consistent with the client, otherwise authentication will never succeed.
      sid: __sid
    matcher:
      fail-fast-match-max-attempts: 10
      fail-fast-match-delay: 3600000
      enabled-captcha-max-attempts: 3
      fail-fast-captcha-max-attempts: 100
      fail-fast-captcha-delay: 600000
      captcha-expire-ms: 60000
      fail-fast-sms-max-attempts: 3
      fail-fast-sms-max-delay: 1800000
      fail-fast-sms-delay: 90000
      sms-expire-ms: 300000
    cipher:
      enable-data-cipher: true # Default by true
    session:
      enable-access-token-validity: true # Default: true
      global-session-timeout: 7200_000 # Default: 1800_000ms
      session-validation-interval: 360_000 # Default: 360_000ms
    cookie:
      name: _TGC
    security:
      hsts-on-profiles-active: [pro,prod,production]
    risk:
      check-request-ip-same-login: true
    acl:
      secure: false # Turn off protection will trust any same intranet IP.
      allowIpRange: ${IAM_ACL_ALLOW:127.0.0.1}
      denyIpRange: ${IAM_ACL_DENY}
    captcha:
      #kaptcha:
      #gif:
      jigsaw:
        pool-size: 64
    v1-oidc: # see:https://openid.net/specs/openid-connect-core-1_0.html#AuthResponseValidation
      www-realm-name: 'IAM OIDC Realm'
      id-token-digest-name: SHA-256
      jws-algorithm-name: RS256
      jwks-json-resource: classpath*:/credentials/oidc/jwks-default.json
      code-challenge-methods-supported: ["plain", "S256"]
      id-token-alg-supported: ["none", "RS256"]
      access-token-expiration-seconds: 3600
      refresh-token-expiration-seconds: 86400
      code-expiration-seconds: 10
      service-documentation: 'https://oidc.iam.wl4g.com/connect/service_documentation.html'
