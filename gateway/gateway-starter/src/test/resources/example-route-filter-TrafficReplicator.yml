# Copyright (c) 2017 ~ 2025, the original author wangl.sir individual Inc,
# All rights reserved. Contact us <Wanglsir@gmail.com, 983708408@qq.com>
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# #### IAM Gateway Example routes-filter configuration. ####
#
spring:
  cloud:
    ## see:org.springframework.cloud.gateway.config.GatewayAutoConfiguration
    ## see:https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.0.0.RELEASE/single/spring-cloud-gateway.html#_requestratelimiter_gatewayfilter_factory
    ## see:https://github.com/eugenp/tutorials/blob/master/spring-cloud/spring-cloud-gateway/src/main/resources/application-webfilters.yml
    ## see:https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/appendix.html
    gateway:
      routes:
        - id: productpage-service-route
          uri: lb://productpage-service
          predicates:
            - Path=/productpage/**
            ## Note: Use the built-in 'WeightCalculatorWebFilter' to implement canary publishing. This should not be the most elegant 
            ## choice. For example, in some scenarios, the client request URL will not change, so it is impossible to implement
            ## canary traffic based on this router. Instead, Iscg's dedicated 'CanaryLoadBalancerFilter' should be used, 
            ## which supports dynamic matching of any HTTP request based on SPEL expressions, which is very flexible.
            ## see:https://github.com/spring-cloud/spring-cloud-gateway/pull/215
            #- Weight=v1-productpage-service,5
          filters:
            ## see: org.springframework.cloud.gateway.filter.factory.RewritePathGatewayFilterFactory#apply
            - RewritePath=/productpage/(?<segment>.*),/$\{segment}
            - name: TrafficReplicator
              ## More configurations see:com.wl4g.iam.gateway.traffic.TrafficReplicationFilterFactory#applyDefaultToConfig() and prefix: 'spring.iam.gateway.traffic.defaultReplication'
              args:
                targetUris: ["http://localhost:8888/"]
                ## The sampling percentage rate of traffic that needs to be replication.
                percentage: 1d ## Default by 1d
                #wiretap: false ## Default by false
                #connectTimeout: 45_000 ## Default by 45s
                ### see:org.springframework.cloud.gateway.filter.NettyRoutingFilter#getResponseTimeout
                #responseTimeout: 60_000 ## Default by 60s
                #maxHeaderSize: 65535 ## Default no set.
                ##maxInitialLineLength: ## Default by null
                ##proxy:
                ## host:
                ## port:
                ## username:
                ## password:
                ## non-proxy-hosts-pattern:
                #pool:
                #  name: proxy ## Default by proxy
                #  #metrics: true ## Default by false
                #  #max-idle-time: 
                #  #acquire-timeout: 45000 # Default by 45000ms
                #websocket:
                #  proxy-ping: true ## Default by true
                #  max-frame-payload-length: 65535 ## Default no set.
                #  #max-connections: ## Default by: max(availableProcessors(),8)*2)
                #ssl: ## see:org.springframework.cloud.gateway.config.GatewayAutoConfiguration.NettyConfiguration#gatewayHttpClient()
                #  default-configuration-type: TCP ## Default by 'TCP'
                #  handshake-timeout: 10000ms ## Default by 10000ms
                #  close-notify-flush-timeout: 3000ms ## Default by 3000ms
                #  close-notify-read-timeout: 0 ## Default by 0
                #  #key-password: ${spring.cloud.gateway.httpclient.ssl.key-store-password}
                #  #key-store: ## Keystore path for Netty HttpClient.
                #  #key-store-type:
                #  #key-store-password:
                #  #key-store-provider:
                #  #trusted-x509-certificates:
                #  #use-insecure-trust-manager: true ## Default by false
