# Copyright (c) 2017 ~ 2025, the original author wangl.sir individual Inc,
# All rights reserved. Contact us <Wanglsir@gmail.com, 983708408@qq.com>
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# #### IAM Gateway Example routes-filter configuration. ####
#
spring:
  cloud:
    ## see:org.springframework.cloud.gateway.config.GatewayAutoConfiguration
    ## see:https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.0.0.RELEASE/single/spring-cloud-gateway.html#_requestratelimiter_gatewayfilter_factory
    ## see:https://github.com/eugenp/tutorials/blob/master/spring-cloud/spring-cloud-gateway/src/main/resources/application-webfilters.yml
    ## see:https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/appendix.html
    gateway:
      routes:
        - id: productpage-service-route
          uri: lb://productpage-service
          predicates:
            - Path=/productpage/**
            ## Note: Use the built-in 'WeightCalculatorWebFilter' to implement canary publishing. This should not be the most elegant 
            ## choice. For example, in some scenarios, the client request URL will not change, so it is impossible to implement
            ## canary traffic based on this router. Instead, Iscg's dedicated 'CanaryLoadBalancerFilter' should be used, 
            ## which supports dynamic matching of any HTTP request based on SPEL expressions, which is very flexible.
            ## see:https://github.com/spring-cloud/spring-cloud-gateway/pull/215
            #- Weight=v1-productpage-service,5
          filters:
            ## see: org.springframework.cloud.gateway.filter.factory.RewritePathGatewayFilterFactory#apply
            - RewritePath=/productpage/(?<segment>.*),/$\{segment}
            - name: SimpleSignAuthing
              args:
                ## Note: In some special business platform scenarios, the signature authentication protocol may not define
                ## appId (such as Alibaba Cloud Market SaaS product authentication API), then the uniqueness of the client
                ## application can only be determined according to the request route ID.
                app-id-extractor: RouteId ## Default by 'Parameter', Options(Parameter|RouteId)
                ## Only valid when appId extract mode is parameter.
                app-id-param: appId
                secret-param: key ## Default by 'appSecret'
                sign-replay-verify-enabled: true ## Default by true
                sign-replay-verify-bloom-expire-seconds: 604800 ## Default by 7*24*60*60
                sign-param: token ## Default by 'sign'
                sign-algorithm: MD5 ## Default by 'S256', Options(MD5|S1|S256|S384|S512|HMD5|HS1|HS256|HS512)
                sign-hashing-mode: UriParamsKeySortedHashing ## Default by 'UriParamsKeySortedHashing'
                sign-hashing-include-params: ['*'] ## Default by []
                sign-hashing-exclude-params: ['response_type','__iscg_log'] ## Default by []
                add-sign-auth-client-id-header: X-Sign-Auth-AppId ## Default by 'X-Sign-Auth-AppId'
